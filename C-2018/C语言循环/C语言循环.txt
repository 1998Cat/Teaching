1、do...while...
    1、定义一个变量，赋值为1
    2、打印第一步中定义的变量
    3、变量自增
    4、如果while部分条件成立，则继续执行do语句块
        如果while部分条件不成立，则不会继续执行do语句块（结束循环）

    do...while的结构
        1、初始化表达式（控制循环的开始），do...while结构的外部
        2、条件表达式（控制循环的结束）   while
        3、增量表达式，循环体

        注意事项：
            1）一定先执行do循环体部分，然后再进行while条件判断
            2）do循环体至少执行一次
            3)while后面一定要加分号

        初始化表达式

        do 
        {
            循环体语句
            增量表达式
        } while (条件表达式);

2、while循环
    1、初始化表达式
    2、条件表达式， while
    3、增量表达式，循环体

    注意事项：
        1）先判断while部分的条件表达式，只有条件表达式成立了，才会执行循环体部分，如果条件表达式不成立，则不执行循环体
        2）循环体部分可能 一次都不执行

        初始化表达式
        while (条件表达式)
        {
            循环体语句
            增量表达式
        }

3、for循环
    for (int i = 1; i <= 100; i++)
    {
        printf("%d\n", i);
    }

    for(初始化表达式; 条件表达式; 增量表达式)
    {
        循环体语句
    }

    1、执行初始化表达式（只执行一次）
    2、条件判断，如果条件成立，则进入循环体执行
    3、执行循环体后，再执行增量表达式，接下来继续执行条件表达式

    a、三个表达式都省略，则表示无限循环
        for(;;)
        {

        }
    b、把初始化表达式省略，此时初始化表达式必须在for循环前定义好
        int i = 1;
        for(; i < 100; i++)
        {

        }
    c、把条件表达式省略，此时无限循环，可以指定初始化的值，也可以指定增量
        for (int i = 100; ; i += 5)
        {

        }
    d、把增量表达式省略，在循环体内部写增量表达式
        for (int i = 0; i <= 100;)
        {
            i++;
        }

4、循环的嵌套
    for (int i = 1; i <=9; i++)
    {
        for (int j = 1; j <= i; j++) {
            printf("%d * %d = %d        ", j, i, i * j);
        }
        printf("\n");
    }

    外部循环体进入后，一定是先跑完内部的整个循环后，才会执行外部循环的增量表达式

5、补充的函数
    time(0); 返回系统时间  time.h
    srand(int); 为rand()设置随机数种子  stdlib.h
    rand(); 生成一个伪随机数，如果要限定范围，可以使用取模操作   stdlib.h

6、break
    break用于当满足某种条件的时候，结束循环
    如果循环有嵌套，则break结束离它最近的循环（就近原则）。break在内层循环，则只能结束内层循环，对外层循环不会有影响

7、continue
    continue用于当满足某种条件的时候，跳过本次循环，直接进入下一次循环。满足条件时，在continue后面出现的所有代码都不会执行
    与break一样，也是就近原则