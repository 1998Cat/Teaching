1、C语言变量作用域
    作用域: 变量在哪个范围内是可用的
    1）全局变量
        在所有函数的外部定义的变量（在include语句后，在其他函数前）
        所有函数内部都能共享此变量，一个函数修改了变量的值，则另外一个函数使用此变量时，是修改后的值 
    2）局部变量
        在函数内部声明的变量，则只能在此函数中使用，其他函数不能使用这个变量
        作用域：当前定义变量的函数
                包含有变量定义的循环语句块
                if语句块内部定义的变量
                形参也是局部变量，当前函数内部

        局部变量使用完毕后，则丢失
        
2、C语言中的地址
    1）&
        a、&& 逻辑与操作
        b、 & 按位与操作
        c、 scanf中的&，取地址符号

    2）变量的存储
        C语言中的变量是存储在内存区域中的

        内存是用内存地址来查找某个区域的。类似于一个放满书桌的教室
        内存地址可以用编号来描述

        定义一个变量，首先在内存中分配一个与变量类型所占空间一致的内存空间，此内存空间可能用一个首地址（起始地址）来描述
            再把变量的值放入到分配的内存空间中

        地址: int a = 10;  &a;   &a获取的是变量在内存中的首地址
        值：int a = 10;    a

        int a; // 分配了内存空间，但是内存空间里没有赋予初始值 
        scanf("%d", &a); // 从键盘输入一个值，此值最终放入到变量a对应的内存空间

        char b[10];
        scanf("%s", b); // 在c语言中，数组名等价于数组的首地址    b  ==>   数组的首地址
                        // 数组名等价于数组中的第一个元素，&b == &b[0] ===> 数组的首地址

    假设：把普通数组类型和数组数据类型作为形参在函数中使用，使用完毕后，值的变量是怎样的？

    int a;
    test(a);
    printf("%d", a);

    char a[];
    test(a);
    printf("%s", a);

3、C语言的传值方式

    1）值传递（传值引用）: 形式参数接收的是一个变量的值 
        那么在函数内部会分配一个新的内存空间来接收变量的值，此时变量值的变化不会影响外部的变量
    2）地址传递（传址引用）：形式参数接收的是一个内存空间的地址
        在函数内部不会分配一个新的内存空间，而是指向变量已经分配的内存空间地址，所以此时在函数内部修改变量的值，外部也会被修改

4、指针
    在c语言中，指针是存储内存地址的变量
    int *a;  a存储的是一个地址，这个地址存储的是int类型的数据
    double *b; b存储的是内存地址，此内存地址里存储的是double类型的数据

    int a = 10;
    int *b = &a;// b存储的是变量a的地址
    直接使用b，相当于使用b存储的地址
    如果要使用地址里对应的内容，则需要在指针变量前加*    printf("%d", *b); // 内容

