1、程序代码的三种结构 
    1）顺序结构
        从上往下一行一行执行
    2）选择结构（条件分支结构）
        if语句块

        if...else语句块

        if...else if...else if...else

        switch...case语句块
    3）循环结构

2、if语句块
    条件表达式：使用了关系运算符，逻辑运算符，1或0，算术运算符等
    if (条件表达式)
    {
        // 如果括号里的条件表达式成立，则执行此处的代码
        // 此处可以放任意行代码
    }

    if (条件表达式) 
        // 此时没有加大括号，则此处只能放满足条件的一行代码

    if (条件表达式)
    {

    }
    else
    {
        // 否则就表示不满足if中的条件表达式的所有情况
    }

    if (条件表达式)
    {

    }
    else if (条件表达式)
    {

    }
    ……
    else 
    {

    }

    ****不管需要执行多少行代码，都用{}括起来

    同一个函数中可以出现多个if判断，同级的if判断不会相互影响

3、switch...case语句块
    switch (变量) 
    {
        case 确定的值:语句;break;
        case 确定的值:语句;break;
        case 确定的值:语句;break;
        default:语句;break;
    }

    对swith中的变量进行判断，
    按照case语句出现的顺序，依次判断变量的值是否等于case后面的确定的值，如果相等，则执行此个case :后面的语句块，碰到break，则结束
    如果不相等，则继续判断下一个case
    如果所有case后面的确定值都与switch变量的值 不相等，则匹配default语句块

    注意事项:
        1）switch里的是一个变量
        2）case后面跟的值必须是 常量值，short, int, long, char
        3）case:后面的语句才是匹配到后要执行的语句，可以是多行语句
        4）每一个case后面都需要使用break;结束匹配，如果没有加break，哪怕匹配到了，后面的case语句会继续执行
        5）应该有default语句，但可以省略

4、if语句的嵌套
    if语句块可以嵌套在if或else或else if中，可以多层嵌套
    详情请参考：age_inner_if.cpp bank.cpp

5、scanf的输入
    输入的内容临时存储在一个内存缓冲区中
    读入单个字符时，先输入一个字符，还要按回车键
    此时缓冲区中会有两个字符
    当第二次使用scanf读入单个字符时，直接会读取缓冲区中的剩余字符回车键，所以并不会按照我们的想法继续要求输入字符 

    解决方案：
    1）使用清除缓冲区的方法，在每一次调用scanf之前先fflush(stdin);
    2）使用getchar来替代scanf函数，但是在getchar()前也需要先fflush(stdin);
